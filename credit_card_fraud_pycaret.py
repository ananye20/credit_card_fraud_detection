# -*- coding: utf-8 -*-
"""Credit_Card_Fraud_PyCaret.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jd7WtYifLJHQVTkAXDbzRXho4D2LVvSI
"""

!pip install --pre pycaret[full]

import pandas as pd
import seaborn as sns
from pycaret.utils import version
from pycaret.datasets import get_data
from pycaret.classification import *
from pycaret.regression import *
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import plotly.graph_objects as go

df = pd.read_csv('fraudTrain.csv')

test = pd.read_csv('fraudTest.csv')

df.head()

test.head()

df.isnull().sum()

df.dtypes

df['is_fraud'].value_counts()

df['Unnamed: 0'] = df['Unnamed: 0'].astype('object')
df['zip'] = df['zip'].astype('object')
df['cc_num']=df['cc_num'].astype('object')
df['unix_time']=df['unix_time'].astype('object')

for i in df.select_dtypes(include='object').columns:
  if(len(df[i].unique())>950):
    print(i)
    df=df.drop(i, axis=1)

df.columns

numericals = ['amt', 'lat', 'long', 'city_pop', 'merch_lat', 'merch_long']
categoricals = ['first','last','merchant', 'category', 'city', 'state', 'job', 'gender']
ignore = ['unix_time', 'cc_num']

df.dtypes

y = df['is_fraud']

percentage = 1
min_class_size = df['is_fraud'].value_counts().min()
sampled_df = df.groupby('is_fraud', group_keys=False).apply(lambda x: x.sample(frac=percentage * min_class_size / len(x), random_state=42))

sampled_df['is_fraud'].value_counts()

exp1 = ClassificationExperiment()

exp1.setup(sampled_df, target='is_fraud', session_id=555, train_size=0.7,
           categorical_features=categoricals, numeric_features=numericals,
           preprocess=True, normalize=True, transformation=True,
           remove_multicollinearity=True, multicollinearity_threshold=0.95,
           remove_outliers=True, use_gpu=True)

top_5 = exp1.compare_models(n_select=5, fold =10 , turbo = True, sort='Recall')

lightbgm = exp1.create_model('lightgbm')

stacker = exp1.stack_models(top_5)

stacker

predictions = exp1.predict_model(stacker, data=test)

predictions

predictions.loc[predictions['is_fraud']==0, ['is_fraud','prediction_label']]

predictions['is_fraud'].value_counts()

confusion_matrix(predictions['is_fraud'], predictions['prediction_label'])

metrics = ['Accuracy', 'Recall']
values = [round(accuracy,2), round(recall,2)]
fig = go.Figure()
fig.add_trace(go.Bar(
    x=metrics,
    y=values,
    text = values*100,
    marker_color=['skyblue', 'lightgreen'],
    textposition='auto'
))

fig.update_layout(
    title='Model Performance: Accuracy and Recall',
    yaxis=dict(title='Score', range=[0, 1]),
    xaxis=dict(title='Metrics'),
)

fig.show()

